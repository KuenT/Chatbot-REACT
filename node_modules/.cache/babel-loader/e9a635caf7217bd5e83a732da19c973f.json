{"ast":null,"code":"var _jsxFileName = \"/Users/quentin/Chatbot/src/Components/ChatContent/ChatContent.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef } from \"react\"; // Redux\n\nimport { connect } from \"react-redux\";\nimport { addMessageToChatFrom } from \"../../Actions/Bot/botActions\"; // Styles\n\nimport \"./chatContent.scss\"; // Components\n\nimport ChatItem from \"./ChatItem\"; // Services\n\nimport { getCovidData, getNews, getHolidays } from \"../../Services/Bot/botAPI\"; // Constants\n\nimport { bots } from \"../../constants\";\nimport { calculateCPUBenchmark } from \"../../utils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ChatContent(props) {\n  _s();\n\n  let messagesEndRef = useRef(null);\n  let inputRef = useRef(null); // Component did mount\n\n  useEffect(() => {\n    inputRef.current.focus();\n  }, []); // Scroll to bottom when chat is updated\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [props.chat.chatArray]);\n\n  const shouldBotRespond = msg => {\n    if (msg.match(/hello/gi) || msg.match(/hey/gi) || msg.match(/hi/gi)) {\n      greet(\"bot1\");\n      return;\n    }\n\n    if (msg.match(/covid/gi)) {\n      getCovidCaseCounts();\n      return;\n    }\n\n    if (props.chat.chatArray.length >= 2 && props.chat.chatArray[props.chat.chatArray.length - 2].msg.match(/search/gi)) {\n      searchKeyword(msg);\n      return;\n    }\n  };\n  /**\n   * Bots say hi\n   */\n\n\n  const greet = bot => {\n    props.addMessageToChatFrom(`Hey there! I am ${bots[bot].name}.`, bot);\n    props.addMessageToChatFrom(bots[bot].powers, bot);\n  };\n  /**\n   * Gets updated covid data\n   */\n\n\n  const getCovidCaseCounts = async () => {\n    let response = await getCovidData();\n    props.addMessageToChatFrom(`The world covid report is as follows: ${response}`, \"bot1\");\n  };\n  /**\n   * @desc Sends message to chat that we entered\n   * @param {value from inputRef} e\n   */\n\n\n  const sendMessageFromUser = (message = inputRef.current.value) => {\n    if (message) {\n      props.addMessageToChatFrom(message, \"me\");\n      shouldBotRespond(message);\n    }\n\n    inputRef.current.value = \"\";\n  };\n\n  const handleKeyDown = event => {\n    let val = inputRef.current.value;\n\n    if (event.keyCode === 13 && val !== \"\") {\n      sendMessageFromUser(val);\n    }\n  };\n\n  const scrollToBottom = () => {\n    messagesEndRef.current.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mainChatWindow\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"blur\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content__body\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat__items\",\n        children: [props.chat.chatArray.map(itm => {\n          return /*#__PURE__*/_jsxDEV(ChatItem, {\n            type: itm.type ? itm.type : \"me\",\n            msg: itm.msg,\n            timeStamp: itm.timeStamp\n          }, itm.key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 15\n          }, this);\n        }), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: messagesEndRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content__footer\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sendNewMessage\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Type a message here\",\n          onKeyDown: handleKeyDown,\n          ref: inputRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btnSendMsg\",\n          id: \"sendMsgBtn\",\n          onClick: () => sendMessageFromUser(),\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"fa fa-location-arrow\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ChatContent, \"dSaFLxlCGpGBs7J7MTHcFUBxSpA=\");\n\n_c = ChatContent;\n\nconst mapStateToProps = ({\n  chat\n}) => ({\n  chat\n});\n\nconst mapDispatchToProps = dispatch => ({\n  addMessageToChatFrom: (msg, type) => dispatch(addMessageToChatFrom(msg, type))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ChatContent);\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatContent\");","map":{"version":3,"sources":["/Users/quentin/Chatbot/src/Components/ChatContent/ChatContent.jsx"],"names":["React","useEffect","useRef","connect","addMessageToChatFrom","ChatItem","getCovidData","getNews","getHolidays","bots","calculateCPUBenchmark","ChatContent","props","messagesEndRef","inputRef","current","focus","scrollToBottom","chat","chatArray","shouldBotRespond","msg","match","greet","getCovidCaseCounts","length","searchKeyword","bot","name","powers","response","sendMessageFromUser","message","value","handleKeyDown","event","val","keyCode","scrollIntoView","behavior","map","itm","type","timeStamp","key","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef } from \"react\";\n\n// Redux\nimport { connect } from \"react-redux\";\nimport { addMessageToChatFrom } from \"../../Actions/Bot/botActions\";\n\n// Styles\nimport \"./chatContent.scss\";\n\n// Components\nimport ChatItem from \"./ChatItem\";\n\n// Services\nimport { getCovidData, getNews, getHolidays } from \"../../Services/Bot/botAPI\";\n\n// Constants\nimport { bots } from \"../../constants\";\nimport { calculateCPUBenchmark } from \"../../utils\";\n\nfunction ChatContent(props) {\n  let messagesEndRef = useRef(null);\n  let inputRef = useRef(null);\n\n  // Component did mount\n  useEffect(() => {\n    inputRef.current.focus();\n  }, []);\n\n  // Scroll to bottom when chat is updated\n  useEffect(() => {\n    scrollToBottom();\n  }, [props.chat.chatArray]);\n\n  const shouldBotRespond = (msg) => {\n    if (msg.match(/hello/gi) || msg.match(/hey/gi) || msg.match(/hi/gi)) {\n      greet(\"bot1\");\n      return;\n    }\n\n    if (msg.match(/covid/gi)) {\n      getCovidCaseCounts();\n      return;\n    }\n\n\n    if (\n      props.chat.chatArray.length >= 2 &&\n      props.chat.chatArray[props.chat.chatArray.length - 2].msg.match(\n        /search/gi\n      )\n    ) {\n      searchKeyword(msg);\n      return;\n    }\n  };\n\n  /**\n   * Bots say hi\n   */\n  const greet = (bot) => {\n    props.addMessageToChatFrom(`Hey there! I am ${bots[bot].name}.`, bot);\n    props.addMessageToChatFrom(bots[bot].powers, bot);\n  };\n\n  /**\n   * Gets updated covid data\n   */\n  const getCovidCaseCounts = async () => {\n    let response = await getCovidData();\n    props.addMessageToChatFrom(\n      `The world covid report is as follows: ${response}`,\n      \"bot1\"\n    );\n  };\n\n  /**\n   * @desc Sends message to chat that we entered\n   * @param {value from inputRef} e\n   */\n  const sendMessageFromUser = (message = inputRef.current.value) => {\n    if (message) {\n      props.addMessageToChatFrom(message, \"me\");\n      shouldBotRespond(message);\n    }\n    inputRef.current.value = \"\";\n  };\n\n  const handleKeyDown = (event) => {\n    let val = inputRef.current.value;\n    if (event.keyCode === 13 && val !== \"\") {\n      sendMessageFromUser(val);\n    }\n  };\n\n  const scrollToBottom = () => {\n    messagesEndRef.current.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  return (\n    <div className=\"mainChatWindow\">\n      <div className=\"blur\"></div>\n      <div className=\"content__body\">\n        <div className=\"chat__items\">\n          {props.chat.chatArray.map((itm) => {\n            return (\n              <ChatItem\n                key={itm.key}\n                type={itm.type ? itm.type : \"me\"}\n                msg={itm.msg}\n                timeStamp={itm.timeStamp}\n              />\n            );\n          })}\n          <div ref={messagesEndRef} />\n        </div>\n      </div>\n      <div className=\"content__footer\">\n        <div className=\"sendNewMessage\">\n          <input\n            type=\"text\"\n            placeholder=\"Type a message here\"\n            onKeyDown={handleKeyDown}\n            ref={inputRef}\n          />\n          <button\n            className=\"btnSendMsg\"\n            id=\"sendMsgBtn\"\n            onClick={() => sendMessageFromUser()}\n          >\n            {/* <i className=\"fa fa-paper-plane\"></i> */}\n            <i className=\"fa fa-location-arrow\"></i>\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nconst mapStateToProps = ({ chat }) => ({\n  chat,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  addMessageToChatFrom: (msg, type) =>\n    dispatch(addMessageToChatFrom(msg, type)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ChatContent);\n"]},"metadata":{},"sourceType":"module"}