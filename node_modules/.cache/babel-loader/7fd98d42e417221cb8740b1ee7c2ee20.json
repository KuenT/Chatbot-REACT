{"ast":null,"code":"import { v4 as uuidv4 } from 'uuid';\nexport const constructChatMessage = ({\n  name,\n  msg,\n  type\n}) => {\n  const ob = {\n    key: uuidv4(),\n    name,\n    msg,\n    timeStamp: new Date(),\n    type\n  };\n  return { ...ob\n  };\n};\nexport const calculateCPUBenchmark = () => {\n  var _speedconstant = 8.9997e-9; //if speed=(c*a)/t, then constant=(s*t)/a and time=(a*c)/s\n\n  var d = new Date();\n  var amount = 150000000;\n  var estprocessor = 1.7; //average processor speed, in GHZ\n\n  const generalSpeed = `(JSBenchmark) Running loop ${amount} times.     Estimated time (for ${estprocessor}ghz processor) is ${Math.round(_speedconstant * amount / estprocessor * 100) / 100}s`;\n\n  for (var i = amount; i > 0; i--) {}\n\n  var newd = new Date();\n  var accnewd = Number(String(newd.getSeconds()) + \".\" + String(newd.getMilliseconds()));\n  var accd = Number(String(d.getSeconds()) + \".\" + String(d.getMilliseconds()));\n  var di = accnewd - accd;\n\n  if (d.getMinutes() !== newd.getMinutes()) {\n    di = 60 * (newd.getMinutes() - d.getMinutes()) + di;\n  }\n\n  let spd = _speedconstant * amount / di;\n  const msg = `${generalSpeed} | Time: ${Math.round(di * 1000) / 1000}s, estimated speed: ${Math.round(spd * 1000) / 1000}GHZ.`;\n  return msg;\n};","map":{"version":3,"sources":["/Users/quentin/Chatbot/src/utils.js"],"names":["v4","uuidv4","constructChatMessage","name","msg","type","ob","key","timeStamp","Date","calculateCPUBenchmark","_speedconstant","d","amount","estprocessor","generalSpeed","Math","round","i","newd","accnewd","Number","String","getSeconds","getMilliseconds","accd","di","getMinutes","spd"],"mappings":"AAAA,SAASA,EAAE,IAAIC,MAAf,QAA6B,MAA7B;AAEA,OAAO,MAAMC,oBAAoB,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,GAAR;AAAaC,EAAAA;AAAb,CAAD,KAAyB;AAC3D,QAAMC,EAAE,GAAG;AACTC,IAAAA,GAAG,EAAEN,MAAM,EADF;AAETE,IAAAA,IAFS;AAGTC,IAAAA,GAHS;AAITI,IAAAA,SAAS,EAAE,IAAIC,IAAJ,EAJF;AAKTJ,IAAAA;AALS,GAAX;AAOA,SAAO,EAAE,GAAGC;AAAL,GAAP;AACD,CATM;AAWP,OAAO,MAAMI,qBAAqB,GAAG,MAAM;AACzC,MAAIC,cAAc,GAAG,SAArB,CADyC,CACT;;AAChC,MAAIC,CAAC,GAAG,IAAIH,IAAJ,EAAR;AACA,MAAII,MAAM,GAAG,SAAb;AACA,MAAIC,YAAY,GAAG,GAAnB,CAJyC,CAIjB;;AACxB,QAAMC,YAAY,GAAI,8BAA6BF,MAAO,mCAAkCC,YAAa,qBAAqBE,IAAI,CAACC,KAAL,CAAaN,cAAc,GAAGE,MAAlB,GAA4BC,YAA7B,GAA6C,GAAxD,IAA+D,GAAK,GAAlM;;AACA,OAAK,IAAII,CAAC,GAAGL,MAAb,EAAqBK,CAAC,GAAG,CAAzB,EAA4BA,CAAC,EAA7B,EAAiC,CAAG;;AACpC,MAAIC,IAAI,GAAG,IAAIV,IAAJ,EAAX;AACA,MAAIW,OAAO,GAAGC,MAAM,CAACC,MAAM,CAACH,IAAI,CAACI,UAAL,EAAD,CAAN,GAA4B,GAA5B,GAAkCD,MAAM,CAACH,IAAI,CAACK,eAAL,EAAD,CAAzC,CAApB;AACA,MAAIC,IAAI,GAAGJ,MAAM,CAACC,MAAM,CAACV,CAAC,CAACW,UAAF,EAAD,CAAN,GAAyB,GAAzB,GAA+BD,MAAM,CAACV,CAAC,CAACY,eAAF,EAAD,CAAtC,CAAjB;AACA,MAAIE,EAAE,GAAGN,OAAO,GAAGK,IAAnB;;AACA,MAAIb,CAAC,CAACe,UAAF,OAAmBR,IAAI,CAACQ,UAAL,EAAvB,EAA0C;AACxCD,IAAAA,EAAE,GAAI,MAAMP,IAAI,CAACQ,UAAL,KAAoBf,CAAC,CAACe,UAAF,EAA1B,CAAD,GAA8CD,EAAnD;AACD;;AACD,MAAIE,GAAG,GAAKjB,cAAc,GAAGE,MAAlB,GAA4Ba,EAAvC;AACA,QAAMtB,GAAG,GAAI,GAAEW,YAAa,YAAWC,IAAI,CAACC,KAAL,CAAWS,EAAE,GAAG,IAAhB,IAAwB,IAAK,uBAAsBV,IAAI,CAACC,KAAL,CAAWW,GAAG,GAAG,IAAjB,IAAyB,IAAK,MAAxH;AACA,SAAOxB,GAAP;AACD,CAjBM","sourcesContent":["import { v4 as uuidv4 } from 'uuid';\r\n\r\nexport const constructChatMessage = ({ name, msg, type }) => {\r\n  const ob = {\r\n    key: uuidv4(),\r\n    name,\r\n    msg,\r\n    timeStamp: new Date(),\r\n    type,\r\n  };\r\n  return { ...ob };\r\n};\r\n\r\nexport const calculateCPUBenchmark = () => {\r\n  var _speedconstant = 8.9997e-9; //if speed=(c*a)/t, then constant=(s*t)/a and time=(a*c)/s\r\n  var d = new Date();\r\n  var amount = 150000000;\r\n  var estprocessor = 1.7; //average processor speed, in GHZ\r\n  const generalSpeed = `(JSBenchmark) Running loop ${amount} times.     Estimated time (for ${estprocessor}ghz processor) is ${(Math.round(((_speedconstant * amount) / estprocessor) * 100) / 100)}s`\r\n  for (var i = amount; i > 0; i--) { }\r\n  var newd = new Date();\r\n  var accnewd = Number(String(newd.getSeconds()) + \".\" + String(newd.getMilliseconds()));\r\n  var accd = Number(String(d.getSeconds()) + \".\" + String(d.getMilliseconds()));\r\n  var di = accnewd - accd;\r\n  if (d.getMinutes() !== newd.getMinutes()) {\r\n    di = (60 * (newd.getMinutes() - d.getMinutes())) + di\r\n  }\r\n  let spd = ((_speedconstant * amount) / di);\r\n  const msg = `${generalSpeed} | Time: ${Math.round(di * 1000) / 1000}s, estimated speed: ${Math.round(spd * 1000) / 1000}GHZ.`;\r\n  return msg;\r\n}"]},"metadata":{},"sourceType":"module"}